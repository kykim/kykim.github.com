<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[This Is My Blog]]></title>
  <link href="http://kykim.github.com/atom.xml" rel="self"/>
  <link href="http://kykim.github.com/"/>
  <updated>2013-04-02T18:49:49-04:00</updated>
  <id>http://kykim.github.com/</id>
  <author>
    <name><![CDATA[Kevin Y. Kim]]></name>
    <email><![CDATA[kykim@kykim.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XPO929 Show Review]]></title>
    <link href="http://kykim.github.com/blog/2013/04/02/xpo929-show-review/"/>
    <updated>2013-04-02T18:43:00-04:00</updated>
    <id>http://kykim.github.com/blog/2013/04/02/xpo929-show-review</id>
    <content type="html"><![CDATA[<p>Wow, it&#8217;s been more than two months since my last blog post where I promised to post more. Sorry folks.</p>

<p>In the meantime, here&#8217;s a review my bandmate found for our show at <a href="http://www.xpo929.com">XPO929</a> last <a href="http://bushwickdaily.com/2012/10/an-uncmj-night-at-xpo-929">October</a>.</p>

<p>By the way, our new record, Freedom Now!, is out now.
<a href="http://whartontiers.bandcamp.com/album/freedom-now">Bandcamp</a>
<a href="https://itunes.apple.com/us/album/freedom-now!/id608870670">iTunes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Belated New Year]]></title>
    <link href="http://kykim.github.com/blog/2013/02/18/happy-belated-new-year/"/>
    <updated>2013-02-18T11:17:00-05:00</updated>
    <id>http://kykim.github.com/blog/2013/02/18/happy-belated-new-year</id>
    <content type="html"><![CDATA[<p>It&#8217;s been a while since my last post. Without going into too much detail (which I may do later),
here&#8217;s the quick recap:</p>

<!-- more -->


<ul>
<li>Stranded in Portland, OR, for a week due to <a href="http://en.wikipedia.org/wiki/Hurricane_Sandy">Sandy</a></li>
<li>Post-Sandy, no heat, hot water, or power for 22 days (mostly due to my <del>landlord</del> slumlord).</li>
<li>Cat diagnosed with <a href="http://en.wikipedia.org/wiki/Lymphoma_in_animals#Lymphoma_in_cats">Feline Lymphoma</a>. Dies day after Christmas.</li>
<li><a href="http://www.apress.com/9781430238072">Book</a> get published.</li>
<li>General <a href="http://www.apporchard.com/">startup</a> craziness.</li>
</ul>


<p>I hope to be more regular with the posts ongoing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPad mini and Fusion Drive]]></title>
    <link href="http://kykim.github.com/blog/2012/10/24/ipad-mini-and-fusion-drive/"/>
    <updated>2012-10-24T12:38:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/10/24/ipad-mini-and-fusion-drive</id>
    <content type="html"><![CDATA[<p><small>
<em>Update: <a href="http://www.macobserver.com/tmo/article/digging-into-fusion-drive-details">MacObserver</a> has a nice simple explanation of how Fusion Drive works. All the magic is in OSX and Core Storage</em>
</small></p>

<p>Apple announced what was probably the worst kept secret yesterday: the iPad mini. Pretty much what everyone expected and people with more access than me covered it <a href="http://www.theverge.com/2012/10/23/3540572/apple-new-ipad-mini-hands-on">here</a>, <a href="http://gizmodo.com/ipad-mini/">here</a>, and <a href="http://reviews.cnet.com/ipad-mini/">here</a> for example.</p>

<p>Of all the things announced, the one I found the most interesting was the <a href="http://www.apple.com/imac/performance/#fusion">Fusion Drive</a>.</p>

<!-- more -->


<p>On the hardware side, it&#8217;s a combination SSD and HD. That&#8217;s nothing really new, as hybrid SSD/HD&#8217;s have been around for a little while. Interestingly, most hybrid drives have a small SSD (~8GB) to use purely as a cache, Apple&#8217;s Fusion Drive apparently uses a 128GB SSD. <a href="http://arstechnica.com/">ArsTechnica</a> has a nice analysis, where they speculate that it&#8217;s an implementation of <a href="http://arstechnica.com/information-technology/2012/10/apple-fusion-drive-wait-what-how-does-this-work/">automatic tiering</a>. When Phil Schiller first mentioned it in the presentation, I was thinking of <a href="http://en.wikipedia.org/wiki/Hierarchical_storage_management">Hierarchical Storage Management</a>. Which I remember from my days of playing on Vaxen.</p>

<p>Clearly, there&#8217;s a software component to Fusion Drive that&#8217;s implemented in <a href="http://www.apple.com/osx/">Mountain Lion</a>, and ArsTechnica references something called &#8220;Core Storage&#8221;. The only other reference I could find to &#8220;Core Storage&#8221; was <a href="http://blog.fosketts.net/2011/08/04/mac-osx-lion-corestorage-volume-manager/">here</a> and a one-liner in the OSX Lion release note under <a href="http://developer.apple.com/library/mac/#releasenotes/MacOSX/WhatsNewInOSX/Articles/MacOSX10_7.html">File Vault</a>.</p>

<p>This seems like a fascinating solution, and I&#8217;m going to do more research to understand how it all works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Reminders with EventKit (Part 3)]]></title>
    <link href="http://kykim.github.com/blog/2012/10/18/accessing-reminders-with-eventkit-part-3/"/>
    <updated>2012-10-18T11:37:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/10/18/accessing-reminders-with-eventkit-part-3</id>
    <content type="html"><![CDATA[<p><em><a href="http://kykim.github.com/blog/2012/10/09/accessing-reminders-with-eventkit-part-1/">Part 1</a>, <a href="http://kykim.github.com/blog/2012/10/15/accessing-reminders-with-eventkit-part-2/">Part 2</a></em></p>

<p>I left off with the <code>rem</code> command-line app parsing the command-line arguments and stubbed out the functions to handle each command. I&#8217;m going to finish up the app by fleshing out each command function.</p>

<p>Before working on the handler functions, I want to do one more thing. I want to check that my command-line arguments actually specify an actual reminder list (calendar) and reminder id (index).</p>

<!-- more -->


<p>The <code>EKCalendarItem</code> has two identifier properties: <code>calendarItemIdentifier</code> and <code>calendarItemExternalIdentifier</code>. At first thought, it would be a good idea to use one of those properties as the reminder id. However, both identifier properties return a <a href="http://en.wikipedia.org/wiki/Globally_unique_identifier">GUID</a>, which is great for programming purposes, but not so ideal for a command-line app. So, reminder id will be a simple integer to represent the reminder position in the reminder list.</p>

<p>Basically, we want to check the reminder list  name specified and compare it to the known names in the <code>calendars</code> dictionary. If the name is valid, then we check to see if the specified reminder id is within the index range of the reminder array for a given reminder list.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">validateArguments</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">command</span> <span class="o">==</span> <span class="n">CMD_LS</span> <span class="o">&amp;&amp;</span> <span class="n">calendar</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSUInteger</span> <span class="n">calendar_id</span> <span class="o">=</span> <span class="p">[[</span><span class="n">calendars</span> <span class="n">allKeys</span><span class="p">]</span> <span class="nl">indexOfObject:</span><span class="n">calendar</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">calendar_id</span> <span class="o">==</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_print</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">@&quot;rem: Error - Unknown Reminder List: </span><span class="se">\&quot;</span><span class="s">%@</span><span class="se">\&quot;\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">calendar</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">command</span> <span class="o">==</span> <span class="n">CMD_LS</span> <span class="o">&amp;&amp;</span> <span class="n">reminder_id</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">r_id</span> <span class="o">=</span> <span class="p">[</span><span class="n">reminder_id</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">reminders</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendars</span> <span class="nl">objectForKey:</span><span class="n">calendar</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r_id</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">r_id</span> <span class="o">&gt;</span> <span class="n">reminders</span><span class="p">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_print</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">@&quot;rem: Error - ID Out of Range for Reminder List: %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">calendar</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">reminder</span> <span class="o">=</span> <span class="p">[</span><span class="n">reminders</span> <span class="nl">objectAtIndex:</span><span class="n">r_id</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ls</code> command allows the <code>calendar</code> and <code>reminder_id</code> variables to be <code>nil</code>. Other than that, we use the arguments to assign values to the variables <code>calendar</code> and <code>reminder</code>.</p>

<h3>Displaying Reminders</h3>

<p>Before implementing each function, I need some special characters for displaying the reminders. Let&#8217;s take another look at the <a href="http://zx2c4.com/projects/password-store">pass</a> output:</p>

<figure class='code'><figcaption><span>pass  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>zx2c4@laptop ~ <span class="nv">$ </span>pass
</span><span class='line'>Password Store
</span><span class='line'>├── Business
</span><span class='line'>│   ├── some-silly-business-site.com
</span><span class='line'>│   └── another-business-site.net
</span><span class='line'>├── Email
</span><span class='line'>│   ├── donenfeld.com
</span><span class='line'>│   └── zx2c4.com
</span><span class='line'>└── France
</span><span class='line'>    ├── bank
</span><span class='line'>    ├── freebox
</span><span class='line'>    └── Mobilephone
</span></code></pre></td></tr></table></div></figure>


<p>It turns out that <code>pass</code> uses the file system to store everything. To get the nicer output, it uses a program called <a href="http://mama.indstate.edu/users/ice/tree/">tree</a>, which prints out file-system hierarchies. We could hack something that writes out to the file-system, then use <code>tree</code> to display it, but that&#8217;s overkill. Our reminders aren&#8217;t stored in a tree; they&#8217;re only two levels deep: the reminders and their list.</p>

<p>Looking at the <code>pass</code> output, there are three &#8220;special&#8221; strings: &#8220;│   &#8220;, &#8220;├──&#8221;, &#8220;└──&#8221;. Looking at the <code>tree</code> source, I found the unicode encodings for them. But, I&#8217;m cheating and just cutting and pasting into the code.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define TACKER @&quot;├──&quot;</span>
</span><span class='line'><span class="cp">#define CORNER @&quot;└──&quot;</span>
</span><span class='line'><span class="cp">#define PIPER  @&quot;│  &quot;</span>
</span><span class='line'><span class="cp">#define SPACER @&quot;   &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, there are two things to consider:
  1.  The last calender and reminder need to use the corner character.
  2.  The reminders of the last calendar don&#8217;t have the vertical bar.
For expediency&#8217;s sake, I&#8217;m using two functions for output. One for calendars and one for reminders.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_printCalendarLine</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">line</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">prefix</span> <span class="o">=</span> <span class="p">(</span><span class="n">last</span><span class="p">)</span> <span class="o">?</span> <span class="n">CORNER</span> <span class="o">:</span> <span class="n">TACKER</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;%@ %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_printReminderLine</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">line</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">last</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">lastCalendar</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">indent</span> <span class="o">=</span> <span class="p">(</span><span class="n">lastCalendar</span><span class="p">)</span> <span class="o">?</span> <span class="n">SPACER</span> <span class="o">:</span> <span class="n">PIPER</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">prefix</span> <span class="o">=</span> <span class="p">(</span><span class="n">last</span><span class="p">)</span> <span class="o">?</span> <span class="n">CORNER</span> <span class="o">:</span> <span class="n">TACKER</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;%@%@ %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">indent</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Listing Reminders</h3>

<p>Now, the <code>listReminders</code> function is suppose to handle two cases: reminders in a specific reminder list or all reminders. The actually calls to <code>printCalendarLine</code> and <code>printReminderLine</code> will be handled by <code>listCalendar</code>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">listCalendar</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">cal</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printCalendarLine</span><span class="p">(</span><span class="n">cal</span><span class="p">,</span> <span class="n">last</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">reminders</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendars</span> <span class="nl">valueForKey:</span><span class="n">cal</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">EKReminder</span> <span class="o">*</span><span class="n">r</span> <span class="k">in</span> <span class="n">reminders</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printReminderLine</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="p">[</span><span class="n">reminders</span> <span class="n">lastObject</span><span class="p">]),</span> <span class="n">last</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">listReminders</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Reminders</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">calendar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">listCalendar</span><span class="p">(</span><span class="n">calendar</span><span class="p">,</span> <span class="n">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">cal</span> <span class="k">in</span> <span class="n">calendars</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">listCalendar</span><span class="p">(</span><span class="n">cal</span><span class="p">,</span> <span class="p">(</span><span class="n">cal</span> <span class="o">==</span> <span class="p">[[</span><span class="n">calendars</span> <span class="n">allKeys</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trying it out, it gives us this output.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kykim<span class="nv">$ </span>rem
</span><span class='line'>Reminders
</span><span class='line'>├── Work
</span><span class='line'>│   ├── Blog about EventKit
</span><span class='line'>│   └── Finish More iOS Programming Book
</span><span class='line'>└── Home
</span><span class='line'>    ├── Pay Electric
</span><span class='line'>    └── Feed Cat
</span><span class='line'>
</span><span class='line'>kykim<span class="nv">$ </span>./rem ls Home
</span><span class='line'>Reminders
</span><span class='line'>└── Home
</span><span class='line'>    ├── Pay Electric
</span><span class='line'>    └── Feed Cat
</span></code></pre></td></tr></table></div></figure>


<p>Looks good, but one more tweak. All the other commands use a reminder_id to identify which reminder to use. Recall, that I&#8217;m just printing a simple integer index as the reminder_id. <code>printReminderLine</code> and <code>listCalendar</code> change to this.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_printReminderLine</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="kt">id</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">line</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">last</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">lastCalendar</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">indent</span> <span class="o">=</span> <span class="p">(</span><span class="n">lastCalendar</span><span class="p">)</span> <span class="o">?</span> <span class="n">SPACER</span> <span class="o">:</span> <span class="n">PIPER</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">prefix</span> <span class="o">=</span> <span class="p">(</span><span class="n">last</span><span class="p">)</span> <span class="o">?</span> <span class="n">CORNER</span> <span class="o">:</span> <span class="n">TACKER</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;%@%@ %ld. %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">indent</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="kt">id</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_listCalendar</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">cal</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_printCalendarLine</span><span class="p">(</span><span class="n">cal</span><span class="p">,</span> <span class="n">last</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">reminders</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendars</span> <span class="nl">valueForKey:</span><span class="n">cal</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">reminders</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">EKReminder</span> <span class="o">*</span><span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">reminders</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_printReminderLine</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="p">[</span><span class="n">reminders</span> <span class="n">lastObject</span><span class="p">]),</span> <span class="n">last</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Removing a Reminder</h3>

<p>Removing a reminder is a simple call to <code>removeReminder:commit:error:</code> to the event store.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">removeReminder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">removeReminder:</span><span class="n">reminder</span> <span class="nl">commit:</span><span class="n">YES</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_print</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">@&quot;rem: Error removing Reminder (%@) from list %@</span><span class="se">\n\t</span><span class="s">%@&quot;</span><span class="p">,</span> <span class="n">reminder_id</span><span class="p">,</span> <span class="n">calendar</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Show a Reminder Details</h3>

<p>Showing a reminder is a little verbose, but pretty straight-forward. The only catch is using an <code>NSDateFormatter</code> instance to display the date properties of a reminder. The reminder properties I chose to display are: title, calendar (reminder list) name, creation date, last modification date (if different than creation date), start date (if set), due date (if set), and notes (if set).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">showReminder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;Reminder: %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">reminder</span><span class="p">.</span><span class="n">title</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;</span><span class="se">\t</span><span class="s">List: %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">calendar</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;</span><span class="se">\t</span><span class="s">Created On: %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">dateFormatter</span> <span class="nl">stringFromDate:</span><span class="n">reminder</span><span class="p">.</span><span class="n">creationDate</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">reminder</span><span class="p">.</span><span class="n">lastModifiedDate</span> <span class="o">!=</span> <span class="n">reminder</span><span class="p">.</span><span class="n">creationDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;</span><span class="se">\t</span><span class="s">Last Modified On: %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">dateFormatter</span> <span class="nl">stringFromDate:</span><span class="n">reminder</span><span class="p">.</span><span class="n">lastModifiedDate</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDate</span> <span class="o">*</span><span class="n">startDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">reminder</span><span class="p">.</span><span class="n">startDateComponents</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">startDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;</span><span class="se">\t</span><span class="s">Started On: %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">dateFormatter</span> <span class="nl">stringFromDate:</span><span class="n">startDate</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDate</span> <span class="o">*</span><span class="n">dueDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">reminder</span><span class="p">.</span><span class="n">dueDateComponents</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dueDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;</span><span class="se">\t</span><span class="s">Due On: %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">dateFormatter</span> <span class="nl">stringFromDate:</span><span class="n">dueDate</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">reminder</span><span class="p">.</span><span class="n">hasNotes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_print</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">@&quot;</span><span class="se">\t</span><span class="s">Notes: %@</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">reminder</span><span class="p">.</span><span class="n">notes</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Completing a Reminder</h3>

<p>Completing reminder is a simple matter of setting the completed property to YES and saving it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">completeReminder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">reminder</span><span class="p">.</span><span class="n">completed</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">saveReminder:</span><span class="n">reminder</span> <span class="nl">commit:</span><span class="n">YES</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_print</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">@&quot;rem: Error marking Reminder (%@) from list %@</span><span class="se">\n\t</span><span class="s">%@&quot;</span><span class="p">,</span> <span class="n">reminder_id</span><span class="p">,</span> <span class="n">calendar</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. Now I have a simple command-line utility to let me list, view, remove and complete reminders. The project is up on <a href="https://github.com/kykim/rem">Github</a>. Feel free to use and give me your feedback. I have plans to extend <code>rem</code>, check the <a href="https://github.com/kykim/rem/issues">issues</a> for what&#8217;s in the queue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Reminders with EventKit (Part 2)]]></title>
    <link href="http://kykim.github.com/blog/2012/10/15/accessing-reminders-with-eventkit-part-2/"/>
    <updated>2012-10-15T12:05:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/10/15/accessing-reminders-with-eventkit-part-2</id>
    <content type="html"><![CDATA[<p><em><a href="http://kykim.github.com/blog/2012/10/09/accessing-reminders-with-eventkit-part-1/">Part 1</a></em></p>

<p>I want a command-line tool to access Reminders.app data. I was inspired by the command-line password manager, <a href="http://zx2c4.com/projects/password-store">pass</a>. Based on the man page, <code>pass</code> uses the following parameters:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pass <span class="o">[</span>COMMAND<span class="o">]</span> <span class="o">[</span>OPTIONS<span class="o">]</span>... <span class="o">[</span>ARGS<span class="o">]</span>...
</span></code></pre></td></tr></table></div></figure>


<p>This seems like a good model to follow. I&#8217;m going to name this command <code>rem</code>, short for <em>reminders</em>. It also reminds me of my old <a href="http://en.wikipedia.org/wiki/BASIC">BASIC</a> days, where <code>REM</code> started a comment line.</p>

<p>Here&#8217;s the functionality I want for the first iteration:</p>

<ul>
<li> <code>rem [ls] [calendar]</code> list reminders</li>
<li> <code>rem rm &lt;calendar&gt; &lt;reminder_id&gt;</code> remove a reminder</li>
<li> <code>rem cat &lt;calendar&gt; &lt;reminder_id&gt;</code> show a reminder details</li>
<li> <code>rem done &lt;calendar&gt; &lt;reminder_id&gt;</code> mark a reminder as completed</li>
</ul>


<p>I&#8217;m not including functionality to add or modify a reminder (yet). I just don&#8217;t need this functionality right now, as I usually add reminders via my iPhone.</p>

<p>Start with the OSX Command Line Tool Application template, with default options of using Foundation and ARC. Add <code>EventKit.framework</code> to the <code>rem</code> target and away we go.</p>

<!-- more -->


<h3>Parsing the Command-line Arguments</h3>

<p>I need to process the application arguments to know what I want to do. Before doing that, some set up. I <code>#define</code> an array of command strings, and an enumerated type that maps to each element of the command string array.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define COMMANDS @[ @&quot;ls&quot;, @&quot;rm&quot;, @&quot;cat&quot;, @&quot;done&quot;, @&quot;help&quot;, @&quot;version&quot; ]</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">_CommandType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CMD_UNKNOWN</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CMD_LS</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CMD_RM</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CMD_CAT</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CMD_DONE</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CMD_HELP</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CMD_VERSION</span>
</span><span class='line'><span class="p">}</span> <span class="n">CommandType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">CommandType</span> <span class="n">command</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">calendar</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">reminder_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The three global variables hold the parsed values from the command arguments. Some consider it bad form to use a global like this, but it&#8217;s just easier to keep it global rather than passing it around.</p>

<p>The function, <code>parseArguments</code>, handles the argument parsing and is called from <code>main</code>. I won&#8217;t go over the entire implementation, but want to make note of the of a few things.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">parseArguments</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="n">CMD_LS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithArray:</span><span class="p">[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">arguments</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">args</span> <span class="nl">removeObjectAtIndex:</span><span class="mi">0</span><span class="p">];</span>    <span class="c1">// pop off application argument</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// args array is empty, command was excuted without arguments</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">args</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="p">(</span><span class="n">CommandType</span><span class="p">)[</span><span class="n">COMMANDS</span> <span class="nl">indexOfObject:</span><span class="n">cmd</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">command</span> <span class="o">==</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;rem: Error unknown command %s&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">cmd</span> <span class="nl">cStringUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">usage</span><span class="p">();</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I use <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSProcessInfo_Class/Reference/Reference.html">NSProcessInfo</a> to get our command-line arguments. The first element will be the application, so I pop that off.</p>

<p>You can see where how the <code>COMMAND</code> string array and <code>CommandType</code> enumeration have to lineup. I can search the <code>COMMAND</code> array for the matching string, and the index with be the CommandType enumeration value. Better than making a giant <code>if</code> or <code>switch</code> statement. If the command argument isn&#8217;t found the command string array, then I print an error message and spit out the usage.</p>

<p>The rest of the function reads the reminder list (<em>calendar</em>) name and reminder id from the <code>args</code> array.</p>

<h3>Loading and Sorting Reminders</h3>

<p>Two functions to handle reminders. <code>fetchReminders</code> will load the reminders from the event store. <code>sortReminders</code> will organize the fetched reminders into a dictionary keyed on reminder list (calendar) name.</p>

<p>Here&#8217;s <code>fetchReminders</code>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSArray</span><span class="o">*</span> <span class="nf">fetchReminders</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__block</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">reminders</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__block</span> <span class="kt">BOOL</span> <span class="n">fetching</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSPredicate</span> <span class="o">*</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">predicateForRemindersInCalendars:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">store</span> <span class="nl">fetchRemindersMatchingPredicate:</span><span class="n">predicate</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">ekReminders</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reminders</span> <span class="o">=</span> <span class="n">ekReminders</span><span class="p">;</span>
</span><span class='line'>        <span class="n">fetching</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">fetching</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">runUntilDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="nl">dateWithTimeIntervalSinceNow:</span><span class="mf">0.01</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">reminders</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>EKEventStore</code> instance is a global that&#8217;s instantiated at application start. I use it create a predicate to fetch all the reminders across all calendars. Recall that in <a href="http://kykim.github.com/blog/2012/10/09/accessing-reminders-with-eventkit-part-1/">Part 1</a>, I noted that the event store can be expensive to create and release. For a GUI (Cocoa or iOS), I&#8217;d create the event store in the application delegate and have it persist for the lifetime of the app.</p>

<p>I have some funky coding going on here. What&#8217;s up with the <code>while</code> loop after the call to <code>fetchRemindersMatchingPredicate:completion:</code>? I have a boolean flag, <code>fetching</code>, that gets flipped inside the completion handler block. Until it gets flipped, the application&#8217;s <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSRunLoop_Class/Reference/Reference.html">runloop</a> will run for 1/100th of a second. During this 1/100th of second, the completion handler block <em>may</em> get invoked. If so, the <code>fetching</code> flag will be flipped, and the app will leave the <code>while</code> loop.</p>

<p><code>fetchRemindersMatchingPredicate:completion:</code> is an <em>asynchronous</em> call. It gets sent to a another thread to run in the background. The problem is that the completion handler block gets invoked back on the main thread which can cause problems. Ideally, I would try to use <a href="https://developer.apple.com/library/mac/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">Grand Central Dispatch</a> like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_semaphore_t</span> <span class="n">sema</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">store</span> <span class="nl">fetchRemindersMatchingPredicate:</span><span class="n">predicate</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">ekReminders</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">reminders</span> <span class="o">=</span> <span class="n">ekReminders</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">sema</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">sema</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the completion handler block gets invoked on the main thread, the semaphone blocks, and the signal is never sent. So looping over the run loop seems like the best bet.</p>

<p><strong>Note:</strong> <em>This is also the reason I&#8217;m loading all the reminders, then sorting them. If I had access to a synchronous reminder fetch, my first instinct would be to loop over each reminder list. However, loading all at once, then sorting is probably faster.</em></p>

<p>Now that I have an array of reminders, I sort them into a dictionary, keyed on calendar names. I ignore the completed reminders.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSDictionary</span><span class="o">*</span> <span class="nf">sortReminders</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">reminders</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">results</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">reminders</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="o">&amp;&amp;</span> <span class="n">reminders</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">EKReminder</span> <span class="o">*</span><span class="n">r</span> <span class="k">in</span> <span class="n">reminders</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">EKCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">r</span> <span class="n">calendar</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">results</span> <span class="nl">objectForKey:</span><span class="n">calendar</span><span class="p">.</span><span class="n">title</span><span class="p">]</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">results</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">calendar</span><span class="p">.</span><span class="n">title</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">calendarReminders</span> <span class="o">=</span> <span class="p">[</span><span class="n">results</span> <span class="nl">objectForKey:</span><span class="n">calendar</span><span class="p">.</span><span class="n">title</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">calendarReminders</span> <span class="nl">addObject:</span><span class="n">r</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">results</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Handling the Command</h3>

<p>I&#8217;ve got my command-line arguments, and I&#8217;ve got my (sorted) reminders. Now we need to do something. <code>handleCommand</code> is a function around a switch statement for command-specific functions. We&#8217;ll just stub out those functions right now.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">listReminders</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;List Reminders&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">removeReminder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Remove Reminders %@/%@&quot;</span><span class="p">,</span> <span class="n">calendar</span><span class="p">,</span> <span class="n">reminder_id</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">showReminder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Show Reminders %@/%@&quot;</span><span class="p">,</span> <span class="n">calendar</span><span class="p">,</span> <span class="n">reminder_id</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">completeReminder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Complete Reminders %@/%@&quot;</span><span class="p">,</span> <span class="n">calendar</span><span class="p">,</span> <span class="n">reminder_id</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">handleCommand</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">command</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CMD_LS:</span>
</span><span class='line'>            <span class="n">listReminders</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CMD_RM:</span>
</span><span class='line'>            <span class="n">removeReminder</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CMD_CAT:</span>
</span><span class='line'>            <span class="n">showReminder</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CMD_DONE:</span>
</span><span class='line'>            <span class="n">completeReminder</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CMD_HELP:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CMD_VERSION:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, I can build <code>rem</code> and run it. Each command I defined goes to the function that should handle it. But we&#8217;re not printing anything out yet. I&#8217;ll get to that in Part 3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Reminders with EventKit (part 1)]]></title>
    <link href="http://kykim.github.com/blog/2012/10/09/accessing-reminders-with-eventkit-part-1/"/>
    <updated>2012-10-09T15:56:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/10/09/accessing-reminders-with-eventkit-part-1</id>
    <content type="html"><![CDATA[<p>I&#8217;m old school when it comes to certain things. When the <a href="http://en.wikipedia.org/wiki/PowerBook_G4#Titanium_PowerBook_G4">Titanium Powerbook G4</a> came out, I was excited because I could have six Terminal windows open at once. I still use <a href="http://www.gnu.org/software/emacs/">Emacs</a>. My biggest complaint about Xcode 4 is they got rid of the Emacs client integration.</p>

<p>On the other hand, sometimes newer things work for me as well. When Reminders came out in iOS 5, I started using it, but wasn&#8217;t diligent about it. Once it got <a href="http://www.apple.com/osx/whats-new/features.html#reminders">iCloud and Mountain Lion integration</a>, I started using it a lot more. I even use <a href="http://www.apple.com/ios/whats-new/#siri">Siri</a> to make a reminder. I make a reminder on my iPhone, and I have it on all my devices, so I actually keep track of things.</p>

<p>Recently, I started using the command line password manager, <a href="http://zx2c4.com/projects/password-store">pass</a>, to manage my passwords. I tried other password managers, and this is a case where the simpler command-line interface works for me. You type <code>pass</code> and get a list of all your accounts and passwords, which you catagorize. There are simple commands to add, extract and delete passwords. It&#8217;s all encrypted using <a href="http://www.gnupg.org">GPG</a>, so I don&#8217;t need to worry if I lose my laptop. All the data is stored in my home directory, so it&#8217;s part of my <a href="http://www.apple.com/osx/whats-new/features.html#timemachine">Time Machine</a> backups.</p>

<figure class='code'><figcaption><span>pass  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>zx2c4@laptop ~ <span class="nv">$ </span>pass
</span><span class='line'>Password Store
</span><span class='line'>├── Business
</span><span class='line'>│   ├── some-silly-business-site.com
</span><span class='line'>│   └── another-business-site.net
</span><span class='line'>├── Email
</span><span class='line'>│   ├── donenfeld.com
</span><span class='line'>│   └── zx2c4.com
</span><span class='line'>└── France
</span><span class='line'>    ├── bank
</span><span class='line'>    ├── freebox
</span><span class='line'>    └── Mobilephone
</span></code></pre></td></tr></table></div></figure>


<p>I wanted some similar for to access reminders. Now Apple&#8217;s been pretty good about making command-line equivalents for a lot of UI tools (think DiskUtility.app and diskutil), but this is one where they don&#8217;t have anything. A quick Google didn&#8217;t really find anything for me either.</p>

<p>So I have roll up my sleeves and write something myself.</p>

<!-- more -->


<p>Turns out that along with releasing Reminders in Mountain Lion, Apple has given us an SDK to access the data store behind Calendar and Reminders: <strong>EventKit</strong>. <a href="https://developer.apple.com/library/mac/#documentation/DataManagement/Conceptual/EventKitProgGuide">EventKit</a> was first introduced in the OSX and iOS SDKs to give access to Calendar. Now with OSX Mountain Lion and iOS 6, Apple extended EventKit to grant access to Reminders. This extension to EventKit was possible because underneath it all, items in Reminders (“<em>reminders</em>”) are an extension of events in Calendar (“<em>events</em>”). In fact, both sets of data are stored in a single database, which Apple calls the Calendar database.</p>

<p>Why not use something like <a href="http://sqlite.org">SQLite</a> and let us access the calendar database directly? Odds are that your local calendar(s) are synchronized with calendars on server (i.e. iCloud, gCal, etc), typically using <a href="http://caldav.calconnect.org">CalDAV</a>. In order to maintain that synchronization, it’s easier to mediate all access to the local Calendar database to know when changes need to propagated to the server and known when changes have arrived from the server.</p>

<p><strong>Note:</strong> <em>I’m building an application to run in OSX. Most of what I cover is applicable for iOS, but there are some differences. For example, instantiating the event store is different between OSX and iOS. Read the <a href="https://developer.apple.com/library/mac/#documentation/DataManagement/Conceptual/EventKitProgGuide">Calendar and Reminders Programming Guide</a>. Also, I’m building an application to access reminder, I won’t be covering event access.</em></p>

<p>Let&#8217;s review the EventKit framework with respect to reminders.</p>

<h3>Event Store</h3>

<p>At the root of EventKit is the class <code>EKEventStore</code>. This represents the Calendar database. <code>EKEventStore</code> is a fairly heavy-weight object, taking a (relatively) long time to instantiate and release. As a result, your application should only instantiate a single <code>EKEventStore</code>.</p>

<p>To instantiate your event store, you invoke the initializer, <code>initWithAccessToEntityType:</code>, and <code>EKEntityMask</code> for reminders.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKEventStore</span> <span class="o">*</span><span class="n">store</span> <span class="o">=</span> <span class="p">[[</span><span class="n">EKEventStore</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAccessToEntityType:</span><span class="n">EKEntityTypeReminder</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>With iOS, you instantiate your event store with a simple call to <code>init</code>. Then, you request access to reminders using <code>requestAccessToEntityType:completion:</code>. This invoking this method will cause iOS to ask the user if your application is allowed to access your Calendar database. You need to handle both cases in the completion block. This code is not in the OSX EventKit, since access to the Calendar database is granted automatically.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKEventStore</span> <span class="o">*</span><span class="n">store</span> <span class="o">=</span> <span class="p">[</span><span class="n">EKEventStore</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">store</span> <span class="nl">requestAccessToEntityType:</span><span class="n">EKEntityTypeReminder</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">granted</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// access code here</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reminder Lists</h3>

<p>EventKit defines the class <code>EKCalendar</code> to represent a calendar. Events are represented with the class <code>EKEvent</code>. Reminders are modeled with the <code>EKReminder</code> class. <code>EKEvent</code> and <code>EKReminder</code> are extensions of the abstract class <code>EKCalendarItem</code>. Rather than defining a new class to contain a list of reminders, Apple chose to leverage the <code>EKCalendar</code> class as the container of reminders. Conceptually, Reminders calls these Reminder Lists, but internal to the event store, they are just instances of <code>EKCalendar</code>.</p>

<p><code>EKEventStore</code> defines two properties to access default the calendar and reminder list.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKCalendar</span> <span class="o">*</span><span class="n">defaultCalendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="n">defaultCalendarForNewEvents</span><span class="p">];</span>
</span><span class='line'><span class="n">EKCalendar</span> <span class="o">*</span><span class="n">defaultReminderList</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="n">defaultCalendarForNewReminders</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to retrieve all calendars or reminder lists in the event store, you use the <code>calendarsForEntityType:</code> method, specifying the <code>EKEntityType</code> you want.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">calendars</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">calendarsForEntityType:</span><span class="n">EKEntityTypeEvent</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">reminderLists</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">calendarsForEntityType:</span><span class="n">EKEntityTypeReminder</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>There’s another method, <code>calendarWithIdentifier:</code>, that fetches a specific calendar, assuming you know the calendar’s unique identifier.</p>

<h3>Reminders</h3>

<p>To create a new reminder, use the <code>EKReminder</code> class method <code>reminderWithEventStore:</code>. In order for the reminder to be valid, you need to provide values for the <code>title</code> and <code>calendar</code> properties.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EKReminder</span> <span class="o">*</span><span class="n">new_reminder</span> <span class="o">=</span> <span class="p">[</span><span class="n">EKReminder</span> <span class="nl">reminderWithEventStore:</span><span class="n">store</span><span class="p">];</span>
</span><span class='line'><span class="n">new_reminder</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="err">@“</span><span class="n">New</span> <span class="n">Reminder</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="n">new_reminder</span><span class="p">.</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="n">defaultCalendarForNewReminders</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>To specify a start date, you use the <code>startDateComponents</code> property. To specify a due date, use the <code>dueDateComponents</code> property. These two properties are of the <code>NSDateComponents</code>(<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSDateComponents_Class/Reference/Reference.html">doc</a>) class, <strong>not</strong> the <code>NSDate</code> class.</p>

<p>There are two EKReminder properties associated with reminder completion:</p>

<ul>
<li> <code>completed</code> a <code>BOOL</code> flag</li>
<li> <code>completionDate</code> an <code>NSDate</code> instance marking when the reminder was completed.</li>
</ul>


<p>Setting on of these properties will adjust the other. For example, if you set <code>completed</code> to <code>YES</code>, then <code>completionDate</code> will be set to the current date. Setting <code>completed</code> to <code>NO</code>, sets <code>completionDate</code> to <code>nil</code>. Conversely, setting <code>completionDate</code> to a date will set <code>completed</code> to <code>YES</code>; and setting <code>completionDate</code> to <code>nil</code> will set <code>completed</code> to <code>NO</code>.</p>

<p>To save a reminder, call the <code>saveReminder:commit:error:</code> method. To delete a reminder, use the <code>removeReminder:commit:error:</code> method.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">saveReminder:</span><span class="n">reminder</span> <span class="nl">commit:</span><span class="n">YES</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Handle failure here, look at error instance</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">removeReminder:</span><span class="n">reminder</span> <span class="nl">commit:</span><span class="n">YES</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Handle failure here, look at error instance</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, the <code>commit</code> flag is used to tell the event store whether to apply the save/delete immediately, or queue the action as part of a batch. If you pass <code>commit:NO</code>, then the changes will not happen until you invoke the EKEventStore method, <code>commit:</code>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">commit:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Handle failure here, look at error instance</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Retrieving Reminders</h3>

<p>To retrieve your reminders from the event store, you use the <code>fetchRemindersMatchingPredicate:completion:</code> method. Predicates are objects that encapsulate the conditions to perform a search or query. Even though we use an <code>NSPredicate</code>, we can’t construct our EventKit predicate by hand. We have to use one of the three predicate construction methods on <code>EKEventStore</code>.</p>

<ul>
<li> <code>predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:</code> find all incomplete Reminder items within a date range, for a given array of Reminder Lists.</li>
<li> <code>predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:</code> find all completed Reminder items within a date rage for a given array of Reminder Lists.</li>
<li> <code>predicateForRemindersInCalendars:</code> find all Reminder items for a given array of Reminder Lists.</li>
</ul>


<p>To fetch across all reminder lists (calendars), you can simply specify <code>nil</code> for the calendar array.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">predicateForRemindersInCalendars:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the predicate generator methods that take date ranges, you can use the <code>NSDate</code> class methods <code>distantPast</code> and <code>distantFuture</code> to fetch all reminder items.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">store</span> <span class="nl">predicateForIncompleteRemindersWithDueDateStarting:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">distantPast</span><span class="p">]</span> <span class="nl">ending:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">distantFuture</span><span class="p">]</span> <span class="nl">calendars:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have your predicate, you can perform your fetch, with a completion handler block.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">store</span> <span class="nl">fetchRemindersMatchingPredicate:</span><span class="n">predicate</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">reminders</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">EKReminder</span> <span class="o">*</span><span class="n">reminder</span> <span class="k">in</span> <span class="n">reminders</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Process each reminder here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>The completion handler block is send an array of reminder items that match the predicate. This fetch is performed asynchronously and doesn’t need to be dispatched to another thread. However, the completion handler block is invoked on the main thread, which caused problems for me (I’ll get to that in a little bit).
As with calendars, there is a method to retrieve a specific reminder if you know its unique identifier, <code>calendarItemWithIdentifier:</code>. You probably won’t use this method as it’s unlikely that you’ll have an item’s unique identifier handy.</p>

<h3>Alarms, Recurrence, and External Changes</h3>

<p>I’m not going to cover these features in any detail, since I don’t need them for my command-line application. I’ve provided some links to the Apple documentation.</p>

<ul>
<li> <a href="https://developer.apple.com/library/mac/#documentation/DataManagement/Conceptual/EventKitProgGuide/ConfiguringAlarms/ConfiguringAlarms.html">Alarms</a>: You can set an alarm for a given reminder, which can be time or location based.</li>
<li> <a href="https://developer.apple.com/library/mac/#documentation/DataManagement/Conceptual/EventKitProgGuide/CreatingRecurringEvents/CreatingRecurringEvents.html">Recurrence</a>: You can set a reminder to repeat.</li>
<li> <a href="https://developer.apple.com/library/mac/#documentation/DataManagement/Conceptual/EventKitProgGuide/ObservingChanges/ObservingChanges.html">External Changes</a>: As I mentioned earlier, odds are your calendars are tied to a server somewhere. As a result changes from the outside need to be reflected in you EventKit application.</li>
</ul>


<h3>Coming Up: Building Our Command-line Reminders Tool</h3>

<p>Ok, that&#8217;s a pretty good review of the EventKit framework. My next post will use this information to build the command-line tool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parental Appification]]></title>
    <link href="http://kykim.github.com/blog/2012/10/04/parental-appification/"/>
    <updated>2012-10-04T14:15:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/10/04/parental-appification</id>
    <content type="html"><![CDATA[<p>My seven year old niece is learning how to do addition. One of the
drills they are doing is given a number, what other number do you need
to add up to 10. For example, if the teacher says &#8220;one&#8221;, she needs to
reply &#8220;nine.&#8221;</p>

<!-- more -->


<p>My niece is having a little trouble, so my sister says, &#8220;You give me a
number and I&#8217;ll say the answer.&#8221;</p>

<p>&#8220;One&#8221;
&#8220;Nine&#8221;</p>

<p>&#8220;Three&#8221;
&#8220;Seven&#8221;</p>

<p>&#8220;Five&#8221;
&#8220;Five&#8221;</p>

<p>&#8220;Nine&#8221;
&#8220;One&#8221;</p>

<p>&#8220;Mom, you sound like an app.&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yes iOS 6 Maps suck, but...]]></title>
    <link href="http://kykim.github.com/blog/2012/09/27/yes/"/>
    <updated>2012-09-27T09:56:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/09/27/yes</id>
    <content type="html"><![CDATA[<p>Honestly, I&#8217;ve been using the new Maps since June of 2012 without any major issues. Right after WWDC, I visited my sister and her family in LA and used the turn-by-turn directions without any problem. Maps even had me avoid the freeway when driving from Hollywood to LAX. I&#8217;m sure it still needs a lot of work, but for my infrequent needs, it seems to be okay.</p>

<p>Rather than beat up on Maps, Let&#8217;s take a look at some cool little features that you might not know about.</p>

<!-- more -->


<ol>
<li><p>Emoji Keyboard.
Enter Settings and navigate to General > Keyboard > Keyboards > Add New Keyboard. Scroll down and look for &#8220;Emoji&#8221;. Once you&#8217;ve added it, your keyboard should show a little globe icon on the lower left. If you tap it, you can toggle between your English keyboard and Emoji one. (If you&#8217;ve already installed another keyboard, tapping the globe with cycle through all your keyboards.</p></li>
<li><p>Limit Ad Tracking.
Inside Settings, navigate to General > About > Advertising (it&#8217;s near the bottom). From there, you have the option to &#8220;Limit Ad Tracking.&#8221; iOS 6 introduces the concept of the &#8220;Advertising Identifier&#8221;, a temporary, anonymous device identifier. If you turn &#8220;Limit Ad Tracking&#8221; on, apps are not allowed to send you targeted ads. It&#8217;s not clear if this feature is working 100% yet, but in theory, it seems like a nice idea.</p></li>
<li><p>Do Not Disturb Mode.
Settings > Do Not Disturb. Your phone won&#8217;t light up, ring or chime when messages, calls or notifications arrive. I&#8217;ve been setting every night before bed. You can customize it inside Settings > Notifications > Do Not Disturb. From there, you can schedule it to activate automatically, allow calls from specific groups of people, and allow a repeated (i.e. urgent) call to ring through. No more getting woken up by your friend&#8217;s late night Facebook updates, Tweets, or drunk dials.</p></li>
<li><p>Custom Alarm Sounds.
Now when you set your clock alarm, you can use a custom ringtone or song. Now you can start your day with the theme from Rocky and take on the world.</p></li>
<li><p>Really delete Gmail.
When you want to delete a message from your Gmail account, tap and hold the Archive Box icon. You&#8217;ll be asked if you want to delete or archive the message. Not perfect, but at least now I can delete my Gmail messages.</p></li>
<li><p>(Bonus for giving your phone to kids) Guided Access.
Technically, Guided Access is an &#8220;Accessibility&#8221; feature, but I use it when my niece or nephew wants to play a game on my phone. Last time I did that, they called everyone in my Contacts (and got Siri to call me &#8220;Poopie Pants&#8221;). Turn on Guided Access via Settings > General > Accessibility > Guided Access. Launch the app you want and triple-tap the Home button. Once Guided Access is turned on, you can&#8217;t leave the app unless you triple-tap and enter a passcode.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[360iDev]]></title>
    <link href="http://kykim.github.com/blog/2012/09/12/360idev/"/>
    <updated>2012-09-12T16:47:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/09/12/360idev</id>
    <content type="html"><![CDATA[<p>Been busy the last month working on a new book.
And I had to take some time off. But not really.</p>

<p>Right now, I&#8217;m in Denver, attending <a href="http://360idev.com">360iDev</a>.</p>

<!-- more -->


<p>It&#8217;s the last day right now, but I did do a book signing for <a href="http://www.apress.com/9781430236085">Pro iOS Tools</a>. Here&#8217;s a picture:
<img src="https://pbs.twimg.com/media/A2h2oubCUAA9nZq.jpg:medium" title="That's me on the end" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[caffeinate]]></title>
    <link href="http://kykim.github.com/blog/2012/08/16/caffeinate/"/>
    <updated>2012-08-16T11:31:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/08/16/caffeinate</id>
    <content type="html"><![CDATA[<p>Really useful when I don&#8217;t want the display to sleep on me.</p>

<pre><code>&gt; caffeinate -d
</code></pre>

<p>Via <a href="http://onethingwell.org/post/28407926729/caffeinate">OneThingWell</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Greatness]]></title>
    <link href="http://kykim.github.com/blog/2012/08/09/greatness/"/>
    <updated>2012-08-09T23:00:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/08/09/greatness</id>
    <content type="html"><![CDATA[<p>Awesome ad.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/LsXRj89cWa0" frameborder="0" allowfullscreen></iframe>


<p>More <a href="http://abcnews.go.com/US/12-year-200-pound-star-nike-ad-aiming/story?id=16962306">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testivus on Code Coverage]]></title>
    <link href="http://kykim.github.com/blog/2012/07/24/code-coverage-and-the-zen-master/"/>
    <updated>2012-07-24T20:11:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/07/24/code-coverage-and-the-zen-master</id>
    <content type="html"><![CDATA[<p>From <a href="http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=204677">Testivus on Test Coverage</a></p>

<p>Early one morning, a programmer asked the great master:<br/>
<em>“I am ready to write some unit tests. What code coverage should I aim for?”</em></p>

<p>The great master replied:<br/>
<em>“Don’t worry about coverage, just write some good tests.”</em></p>

<p>The programmer smiled, bowed, and left.</p>

<!-- more -->


<p>&#8230;</p>

<p>Later that day, a second programmer asked the same question.</p>

<p>The great master pointed at a pot of boiling water and said:<br/>
<em>“How many grains of rice should put in that pot?”</em></p>

<p>The programmer, looking puzzled, replied:<br/>
<em>“How can I possibly tell you? It depends on how many people you need to feed, how hungry they are, what other food you are serving, how much rice you have available, and so on.”</em></p>

<p><em>“Exactly,”</em> said the great master.</p>

<p>The second programmer smiled, bowed, and left.</p>

<p>&#8230;</p>

<p>Toward the end of the day, a third programmer came and asked the same question about code coverage.</p>

<p><strong>“Eighty percent and no less!”</strong><br/>
Replied the master in a stern voice, pounding his fist on the table.</p>

<p>The third programmer smiled, bowed, and left.</p>

<p>&#8230;</p>

<p>After this last reply, a young apprentice approached the great master:<br/>
<em>“Great master, today I overheard you answer the same question about code coverage with three different answers. Why?”</em></p>

<p>The great master stood up from his chair:<br/>
<em>“Come get some fresh tea with me and let’s talk about it.”</em></p>

<p>After they filled their cups with smoking hot green tea, the great master began to answer:<br/>
<em>“The first programmer is new and just getting started with testing. Right now he has a lot of code and no tests. He has a long way to go; focusing on code coverage at this time would be depressing and quite useless. He’s better off just getting used to writing and running some tests. He can worry about coverage later.”</em></p>

<p><em>“The second programmer, on the other hand, is quite experience both at programming and testing. When I replied by asking her how many grains of rice I should put in a pot, I helped her realize that the amount of testing necessary depends on a number of factors, and she knows those factors better than I do – it’s her code after all. There is no single, simple, answer, and she’s smart enough to handle the truth and work with that.”</em></p>

<p><em>“I see,”</em> said the young apprentice, <em>“but if there is no single simple answer, then why did you answer the third programmer ‘Eighty percent and no less’?”</em></p>

<p>The great master laughed so hard and loud that his belly, evidence that he drank more than just green tea, flopped up and down.
<em>“The third programmer wants only simple answers – even when there are no simple answers … and then does not follow them anyway.”</em></p>

<p>The young apprentice and the grizzled great master finished drinking their tea in contemplative silence.</p>

<p>For more, read <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=203994">The Way of Testivus</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parable of the Day]]></title>
    <link href="http://kykim.github.com/blog/2012/07/23/parable-of-the-day/"/>
    <updated>2012-07-23T16:09:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/07/23/parable-of-the-day</id>
    <content type="html"><![CDATA[<p>The Americans and the Japanese decided to engage in a boat race. Both
teams practiced hard and long to reach their peak performance levels.
On the big day they felt ready. The Japanese won by a mile. The
American team was discouraged by the loss. Morale sagged. Corporate
management decided that the reason for the crushing defeat had to be
found, so a consulting firm was hired to investigate the problem and
recommend corrective action.</p>

<!-- more -->


<p>The consultant&#8217;s finding: The Japanese team had eight people rowing
and one person steering; the American team had one person rowing and
eight people steering. After a year of study and millions spent
analyzing the problem, the consultant firm concluded that too many
people were steering and not enough were rowing on the American
team. So as race day neared again the following year, the American
team&#8217;s management structure was completely reorganized. The new
structure: four steering managers, three area steering managers, and a
new performance review system for the person rowing the boat to
provide work incentive.</p>

<p>The next year, the Japanese won by TWO miles!!!</p>

<p>Humiliated, the American corporation laid off the rower for poor
performance and gave the managers a bonus for discovering the problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quote of the Day]]></title>
    <link href="http://kykim.github.com/blog/2012/07/13/quote-of-the-day/"/>
    <updated>2012-07-13T18:05:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/07/13/quote-of-the-day</id>
    <content type="html"><![CDATA[<p><strong>What people say,</strong><br/>
<strong>What people do,</strong><br/>
<strong>And</strong><br/>
<strong>What they say they do</strong><br/>
<strong>Are entirely different things.</strong><br/>
<sup>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<em>Margaret Mead</em></sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPad Charging Costs $1.36 per Year]]></title>
    <link href="http://kykim.github.com/blog/2012/06/25/ipad-charging-costs/"/>
    <updated>2012-06-25T13:19:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/06/25/ipad-charging-costs</id>
    <content type="html"><![CDATA[<p>According to the Electric Power Research Institute <a href="http://www.epri.com/">(ERPI)</a>, it only costs $1.36 per year to charge your iPad <a href="http://www.cultofmac.com/175195/your-new-ipad-costs-just-1-36-per-year-to-charge/">(source)</a>.</p>

<!-- more -->


<p>Just to satisfy my curiousity, I ran my iPad charge through a <a href="http://www.p3international.com/products/special/p4400/p4400-ce.html">Kill-A-Watt 4400</a> to see how much electricity I was &#8220;leaking&#8221; when not charging my iPad. The result: unmeasurable by the meter after a day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The First Rule of Secret Sushi]]></title>
    <link href="http://kykim.github.com/blog/2012/06/13/the-first-rule-of-secret-sushi/"/>
    <updated>2012-06-13T23:54:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/06/13/the-first-rule-of-secret-sushi</id>
    <content type="html"><![CDATA[<p>Don&#8217;t tell anyone where it is.</p>

<p>My friend Bruce is a member of the inner circle (cabal?). Everytime I come to San Francisco, I try to get him to take me there. My first time was at WWDC last year. Since then, I&#8217;ve gone three more times, and brought many of my colleagues with me. Now it&#8217;s expected that I make arrangements for any trip to SF.</p>

<p>This time I brought my colleagues Simon and Sue.</p>

<!-- more -->


<h5>We&#8217;ve arrived</h5>

<p><img src="http://kykim.github.com/images/20120613/01.png" title="We've arrived" >
We had to wait for the previous seating (a birthday party) to finish.</p>

<h5>House Rules</h5>

<p><img src="http://kykim.github.com/images/20120613/02.png" title="House Rules" >
Rumor has it that you can get banned for violating the rules.</p>

<h5>Start off with some sake</h5>

<p><img src="http://kykim.github.com/images/20120613/03.png" title="Start off with some sake" >
Don&#8217;t know if you can tell, but that&#8217;s a big bottle.</p>

<p>I forgot to snap a picture of the first dish. It was mackeral with a ginger soy sauce, garnished with scallions.</p>

<h5>Second Course</h5>

<p><img src="http://kykim.github.com/images/20120613/04.png" title="Second Course" >
A salad with calamari, sprouts and dressing.</p>

<h5>Third Course</h5>

<p><img src="http://kykim.github.com/images/20120613/05.png" title="Third Course" >
Three mushroom with a soy-based sauce, baked.</p>

<h5>Nobu-san preparing the sashimi</h5>

<p><img src="http://kykim.github.com/images/20120613/06.png" title="Nobu-san preparing the sashimi" >
Our host at work.</p>

<h5>Fourth Course</h5>

<p><img src="http://kykim.github.com/images/20120613/07.png" title="Fourth Course" >
That&#8217;s a lot of fish!</p>

<h5>Fifth Course</h5>

<p><img src="http://kykim.github.com/images/20120613/08.png" title="Fifth Course" >
Pumpkin, Burdock (I think) and Zucchini.</p>

<h5>Sixth Course</h5>

<p><img src="http://kykim.github.com/images/20120613/09.png" title="Sixth Course" >
Neck or Shoulder of a yellow mackeral</p>

<h5>Seventh Course</h5>

<p><img src="http://kykim.github.com/images/20120613/10.png" title="Seventh Course" >
Broiled Eel. Unagi!</p>

<h5>Dessert</h5>

<p><img src="http://kykim.github.com/images/20120613/11.png" title="Dessert" >
Melon with Meyer lemon. Never had lemon juice on a melon before. It was delicious!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC Day One]]></title>
    <link href="http://kykim.github.com/blog/2012/06/12/wwdc-day-one/"/>
    <updated>2012-06-12T11:10:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/06/12/wwdc-day-one</id>
    <content type="html"><![CDATA[<p>Hectic first day at WWDC. Rather than recap what others have done better than me, I&#8217;ll just put up some pictures.</p>

<!-- more -->


<h5>Looking for a place in line</h5>

<p><img src="http://kykim.github.com/images/wwdc2012/1.png" title="Looking for a place in line" ></p>

<h5>Waiting for the keynote</h5>

<p><img src="http://kykim.github.com/images/wwdc2012/2.png" title="Waiting for the keynote" ></p>

<h5>Tim takes the stage</h5>

<p><img src="http://kykim.github.com/images/wwdc2012/3.png" title="Tim takes the stage" ></p>

<h5>(Fuzzy) profile of the new MacBook Pro</h5>

<p><img src="http://kykim.github.com/images/wwdc2012/4.png" title="(Fuzzy) profile of the new MacBook Pro" ></p>

<p>I can&#8217;t believe I forgot to take a picture of <a href="http://img.ibtimes.com/www/data/images/full/2012/06/11/280874-craig-federighi-apple-senior-vice-president-software-engineering-stand.jpg">Hair Force One</a></p>

<p>The rest of the day was a blur, and we ended it at a party hosted by our friends at [Crashlytics](http://www.crashlytics.com]
<img src="http://kykim.github.com/images/wwdc2012/5.png" title="Party!" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Texts From Xcode]]></title>
    <link href="http://kykim.github.com/blog/2012/06/07/texts-from-xcode/"/>
    <updated>2012-06-07T14:38:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/06/07/texts-from-xcode</id>
    <content type="html"><![CDATA[<p>Hilarious! And so true.
<a href="http://textfromxcode.tumblr.com/">Texts From Xcode</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Methods in OCMock]]></title>
    <link href="http://kykim.github.com/blog/2012/06/06/mocking-class-methods-in-ocmock/"/>
    <updated>2012-06-06T16:09:00-04:00</updated>
    <id>http://kykim.github.com/blog/2012/06/06/mocking-class-methods-in-ocmock</id>
    <content type="html"><![CDATA[<p>I&#8217;m opening my blog with a post about patches I&#8217;ve made to <a href="http://ocmock.org">OCMock</a> to handle mocking and stubbing class methods. You can find my fork <a href="https://github.com/kykim/ocmock">HERE</a>.</p>

<p>I built on top of the work in progress in the OCMock master. It works, but will probably need some refinement.</p>

<p>Let&#8217;s the example of a static constructor in <code>NSString</code>:</p>

<pre><code>NSString *s = [NSString string];    // returns empty string
</code></pre>

<p>In order to mock this, we do this:</p>

<pre><code>id mockStringClass = [OCMockObject mockForClassObject:[NSString class]];
NSString *mockString = @"Mocked String Result";
[[[mockStringClass stub] andReturn:mockString] string];
NSString *actualString = [NSString string];
STAssertTrue(0 != [actualString length], @"Expected String Not Be Empty");
</code></pre>

<p>I sent the pull request about two weeks ago, still waiting to hear back. Read on if you&#8217;re interested in the details&#8230;</p>

<!-- more -->


<p><a href="http://ocmock.org">OCMock</a> is one of the more popular Objective-C/iOS <a href="http://www.mockobjects.com/">mocking</a> frameworks out there. It actually predates iOS.</p>

<p>One of the biggest problems I&#8217;ve always had with OCMock was its inability to handle class methods. There are many times when I&#8217;ve had to call a class method, that for various reasons I needed to mock.</p>

<figure class='code'><figcaption><span>Class Methods in iOS MediaPlayer framework</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MPMediaQuery</span> <span class="o">*</span><span class="n">songsQuery</span> <span class="o">=</span> <span class="p">[</span><span class="n">MPMediaQuery</span> <span class="n">songsQuery</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">songs</span> <span class="o">=</span> <span class="p">[</span><span class="n">songsQuery</span> <span class="n">items</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re running this on the simulator, you don&#8217;t have a media library (aka iTunes library). So how do you test your code? Besides, testing against &#8220;live&#8221; data is probably a bad idea.</p>

<p>Looking at the OCMock <a href="http://github.com/erikdoe/ocmock">Github</a> repository, there was some preliminary work done on supporting class methods. The class is named OCMockClassObject (<a href="https://github.com/erikdoe/ocmock/blob/master/Source/OCMock/OCMockClassObject.h">header</a>, <a href="https://github.com/erikdoe/ocmock/blob/master/Source/OCMock/OCMockClassObject.m">source</a>). So why doesn&#8217;t this work?</p>

<p>Looking into the unit tests for OCMock, I found the tests for OCMockClassObject. Interestingly, one of the tests,</p>

<pre><code>// - (void)testForwardsUnstubbedMethodsToRealClassObjectAfterStopIsCalled
</code></pre>

<p>is commented out. Why? First, let&#8217;s understand how OCMock works.</p>

<p>When you mock a class, you declare something like this:</p>

<figure class='code'><figcaption><span>Mocking an instance method with OCMock</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">mockObject</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">mockForClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'><span class="p">[[</span><span class="n">mockObject</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;mockedstring&quot;</span><span class="p">]</span> <span class="n">lowercaseString</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// code to test</span>
</span><span class='line'><span class="p">[</span><span class="n">mockObject</span> <span class="n">verify</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>mockObject</code> is declared as mock for <code>NSString</code>. Also, we state that we <em>expect</em> the method <code>lowercaseString</code> to be invoked on <code>mockObject</code>. Furthermore, <code>lowercaseString</code> should return &#8220;mockedstring&#8221;. We defined some test code where <code>mockObject</code> is used. Typically, it is passed into the method we are testing. Finally, we invoke <code>[mockObject verify]</code> to confirm that <code>lowercaseString</code> was called. If not, the test fails.</p>

<p>Without delving too deeply into the specifics of the OCMock, how are these method calls intercepted? Via <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/Reference/Reference.html">NSProxy</a>.</p>

<p>In short, <code>NSProxy</code> is an abstract class, and requires its subclasses to implement</p>

<pre><code>- (void)forwardInvocation:(NSInvocation *)anInvocation`
</code></pre>

<p>An <code>OCMock</code> class (<code>OCMockRecorder</code> specifically) implements <code>forwardInvocation</code> to handle the method call as specified. In the example above, the call is forwarded to a return the value specified in the <code>andReturn:</code> call.</p>

<p>For other mocking options in <code>OCMock</code></p>

<pre><code>+ (id)mockForProtocol:(Protocol *)aProtocol;
+ (id)partialMockForObject:(NSObject *)anObject;
+ (id)niceMockForClass:(Class)aClass;
+ (id)niceMockForProtocol:(Protocol *)aProtocol;
+ (id)observerMock;
</code></pre>

<p>the forwardInvocation relies on <a href="http://cocoadev.com/wiki/MethodSwizzling">method swizzling</a> to redirect methods to expectations and/or stubs.</p>

<p>So why doesn&#8217;t this work for class methods? Well, it turns out it does. The real problems is resetting back to the original state.</p>

<p>One of the important features of unit testing is to make sure each test is atomic. That is, the results on one test should not impact the results of another. To that end, we use <code>setUp</code> and <code>tearDown</code> methods to initialize and clean up our environment before and after running each test. Furthermore, we may do additional configuration inside each test, and it&#8217;s incumbent upon us as developers to make sure we clean up after ourselves.</p>

<p>Looking back at the <code>OCMock</code> source, we can see that the mocking of class methods works fine. It&#8217;s just that our swizzled class method stays swizzled. Why does it work for instance methods? Because the instance is destroyed with each test (hopefully), so any evidence of method swizzling just disappears with the instance. Class method swizzling will persist for the run life of the application (or in this case, the test harness). So we need a away to undo our swizzling.</p>

<p>My solution was simple: create an <code>NSMutableDictionary</code> to store the <a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#jumpTo_96">IMP pointer</a> to the original class method, keyed on the string representation of the class method selector. When the mocked class object is deallocated, simply iterate over the dictionary, replacing all the swizzled class methods for their originals.</p>

<p>I&#8217;m making the assumption that the location of the method (and class definintion) pointed to by the <code>IMP</code> pointer won&#8217;t change during the run life of the application/test harness. I figured this was unlikely, but I needed to make sure.</p>

<p>Who better to ask than Mr. Objective-C: <a href="http://www.linkedin.com/pub/steve-naroff/4/671/194">Steve Naroff</a>? His response:</p>

<pre><code>In theory, no. In practice, yes.

If the code were dynamically loaded/unloaded, the address could
change. If the code were compiled on the fly, you could imagine
the runtime purging infrequently used code and re-instantiating it
later if necessary (to keep the working set of methods down on a
smaller footprint device). Unless things have changed a great deal
in the past 2 years, I'd be surprised if my scenarios happen often
(or at all).
</code></pre>

<p>Well, I&#8217;m pretty sure that won&#8217;t happen while running tests, so this should be safe.</p>

<p>This can be pretty esoteric stuff, that most iOS won&#8217;t ever have to deal with, but to make testing frameworks, know the Objective-C runtime is pretty essential. I recommend the following for more information:</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html">The Objective-C Programming Language</a></li>
<li><a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">Objective-C Runtime Programming Guide</a></li>
<li><a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html">Objective-C Runtime Reference</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
